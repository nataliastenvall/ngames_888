{"version":3,"sources":["Datadog/Datadog.js","Azure/Azure.js","Documentation/Doc1.js","Documentation/Doc2.js","Documentation/Doc3.js","App.js","serviceWorker.js","index.js"],"names":["Datadog","props","class","title","src","className","width","height","scrolling","Azure","id","Doc1","Alert","variant","Heading","App","Jumbotron","fluid","Container","href","role","Row","Col","sm","Doc2","Doc3","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"gUAmBeA,EAjBC,SAAAC,GACd,OACE,yBAAKC,MAAM,cACT,4BACEC,MAAM,UACNC,IAAI,+CACJC,UAAU,oBACVC,MAAM,OACNC,OAAO,MACPC,UAAU,MANZ,mBCcSC,EAjBD,SAAAR,GACZ,OACE,yBAAKS,GAAG,gBACN,4BACEP,MAAM,QACNC,IAAI,wCACJC,UAAU,oBACVC,MAAM,OACNC,OAAO,MACPC,UAAU,MANZ,mB,QCoBSG,EAtBF,SAAAV,GACX,OACE,kBAACW,EAAA,EAAD,CAAOC,QAAQ,QACb,kBAACD,EAAA,EAAME,QAAP,qCACA,4bAQA,6BACA,uBAAGT,UAAU,QAAb,sKCOSM,EApBF,SAAAV,GACX,OACE,kBAACW,EAAA,EAAD,CAAOC,QAAQ,WACb,kBAACD,EAAA,EAAME,QAAP,6EAGA,wLAKA,6BACA,uBAAGT,UAAU,QAAb,kGCISM,EAhBF,SAAAV,GACX,OACE,kBAACW,EAAA,EAAD,CAAOC,QAAQ,QACb,kBAACD,EAAA,EAAME,QAAP,oDACA,qQAMA,6BACA,uBAAGT,UAAU,WCkDJU,E,iLApDX,OACE,yBAAKV,UAAU,OACb,kBAACW,EAAA,EAAD,CAAWC,OAAK,GACd,kBAACC,EAAA,EAAD,KACE,mDACA,qKAKA,uBAAGhB,MAAM,QACP,uBACEA,MAAM,yBACNiB,KAAK,iBACLC,KAAK,UAHP,oBAUN,kBAACF,EAAA,EAAD,KACE,kBAACG,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAKC,GAAI,GACP,kBAAC,EAAD,OAEF,kBAACD,EAAA,EAAD,CAAKC,GAAI,GACP,kBAAC,EAAD,QAGJ,kBAACF,EAAA,EAAD,CAAKX,GAAG,iBACN,kBAACY,EAAA,EAAD,CAAKC,IAAE,GACL,kBAAC,EAAD,OAEF,kBAACD,EAAA,EAAD,CAAKC,IAAE,GACL,kBAACC,EAAD,OAEF,kBAACF,EAAA,EAAD,CAAKC,IAAE,GACL,kBAACE,EAAD,SAIN,kBAACT,EAAA,EAAD,CAAWC,OAAK,GACd,kBAACC,EAAA,EAAD,KACE,iD,GA9CMQ,aCEEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.c5ed096c.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nconst Datadog = props => {\r\n  return (\r\n    <div class=\"iframe_dog\">\r\n      <iframe\r\n        title=\"datadog\"\r\n        src=\"https://status.datadoghq.com/#past-incidents\"\r\n        className=\"updates-container\"\r\n        width=\"100%\"\r\n        height=\"600\"\r\n        scrolling=\"no\"\r\n      >\r\n        Needs iframe!\r\n      </iframe>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Datadog;\r\n","import React from \"react\";\r\n\r\nconst Azure = props => {\r\n  return (\r\n    <div id=\"iframe_azure\">\r\n      <iframe\r\n        title=\"azure\"\r\n        src=\"https://status.azure.com/ru-ru/status\"\r\n        className=\"updates-container\"\r\n        width=\"100%\"\r\n        height=\"600\"\r\n        scrolling=\"no\"\r\n      >\r\n        Needs iframe!\r\n      </iframe>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Azure;\r\n","import React from \"react\";\r\nimport { Alert, Heading } from \"react-bootstrap\";\r\n\r\nconst Doc1 = props => {\r\n  return (\r\n    <Alert variant=\"info\">\r\n      <Alert.Heading>Why did you do what you did?</Alert.Heading>\r\n      <p>\r\n        For the layout, I used react-bootstrap because it is responsive and it\r\n        is an effective way to make a prototype fast. For Datadog status page, I\r\n        used iframe and #past-incidents for showing the list of the latest\r\n        incidents.For Azure status page I planned to use contentWindow.scrollTo\r\n        just React way. And location.reload for refreshing the content. I would\r\n        also make it more dynamic with less repeating in the code.\r\n      </p>\r\n      <hr />\r\n      <p className=\"mb-0\">\r\n        Another option without API will be a Python backend which we can use\r\n        with React, and some library like Pandas for getting and showing on the\r\n        page an exact data.\r\n      </p>\r\n    </Alert>\r\n  );\r\n};\r\n\r\nexport default Doc1;\r\n","import React from \"react\";\r\nimport { Alert, Heading } from \"react-bootstrap\";\r\n\r\nconst Doc1 = props => {\r\n  return (\r\n    <Alert variant=\"success\">\r\n      <Alert.Heading>\r\n        When someone wants to add a new status page, how would that be done?\r\n      </Alert.Heading>\r\n      <p>\r\n        If it will be the same way with iframe: 1)create new component like\r\n        Datadog.js 2)add more rows and columns to our layout 3)call new\r\n        components in App.js.\r\n      </p>\r\n      <hr />\r\n      <p className=\"mb-0\">\r\n        In case with python library it will be more dynamic, but we still need\r\n        to expand our layout.\r\n      </p>\r\n    </Alert>\r\n  );\r\n};\r\n\r\nexport default Doc1;\r\n","import React from \"react\";\r\nimport { Alert, Heading } from \"react-bootstrap\";\r\n\r\nconst Doc1 = props => {\r\n  return (\r\n    <Alert variant=\"info\">\r\n      <Alert.Heading>How much time did you spend with this task?</Alert.Heading>\r\n      <p>\r\n        I spend about 3 hours on this application. And about 4 hours for\r\n        research about different approaches in data scraping and data framing. I\r\n        was not succeeded in those new ways what I found, but at least I tried\r\n        to improve my skills.\r\n      </p>\r\n      <hr />\r\n      <p className=\"mb-0\"></p>\r\n    </Alert>\r\n  );\r\n};\r\n\r\nexport default Doc1;\r\n","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport { Container, Col, Row, Jumbotron, Alert } from \"react-bootstrap\";\nimport Datadog from \"./Datadog/Datadog\";\nimport Azure from \"./Azure/Azure\";\nimport Doc1 from \"./Documentation/Doc1\";\nimport Doc2 from \"./Documentation/Doc2\";\nimport Doc3 from \"./Documentation/Doc3\";\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <Jumbotron fluid>\n          <Container>\n            <h1>Natalia's test task</h1>\n            <p>\n              I tried to make the task with different approaches. I succeeded\n              with the simple one. In the documentation, I will explain my\n              thoughts.\n            </p>\n            <p class=\"lead\">\n              <a\n                class=\"btn btn-primary btn-lg\"\n                href=\"#documentation\"\n                role=\"button\"\n              >\n                Documentation\n              </a>\n            </p>\n          </Container>\n        </Jumbotron>\n        <Container>\n          <Row>\n            <Col sm={6}>\n              <Datadog />\n            </Col>\n            <Col sm={6}>\n              <Azure />\n            </Col>\n          </Row>\n          <Row id=\"documentation\">\n            <Col sm>\n              <Doc1 />\n            </Col>\n            <Col sm>\n              <Doc2 />\n            </Col>\n            <Col sm>\n              <Doc3 />\n            </Col>\n          </Row>\n        </Container>\n        <Jumbotron fluid>\n          <Container>\n            <h1>Thank you!</h1>\n          </Container>\n        </Jumbotron>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}